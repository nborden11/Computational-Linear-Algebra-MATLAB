function [name, ufid, ...
    A1, A2, A3, A4, ...
    A, B, ABBA, C, AC, CA, AI, IA, inverse_A, ...
    D, inverse_D, rref_something, rref_inverse_D, inv_inv_D, ...
    E, inverse_DE, inv_D_inv_E, inv_E_inv_D, ...
    inv_DT, inv_D_T] = Exercise3(n)
    % --- Name & UFID --- %
    name = "Nicholas Borden";
    ufid = 46223988;

    % --- Part A [10 Points] --- %
    % For-Loop (i)
    A1 = zeros(n);
    for i = 1:n
        for j = 1:n
            A1(i,j) = i + j;
        end
    end

    % For-Loop (ii)
    A2 = zeros(n);
    for i = 1:n
        for j = i:n
            A2(i,j) = i + j;
            A2(j,i) = A2(i,j);
        end
    end

    % (Yes, same output)

    % For-Loop (i) = n^2 FLOPs
    % For-Loop (ii) = n(n+1)/2 FLOPs

    % (For-loop i uses fewer FLOPs)

    % --- Part B [10 Points] --- %
    % While-Loop (i)
    A3 = zeros(n); % (DO NOT MODIFY THIS LINE)

    % (REWRITE FOR-LOOP (i) USING WHILE LOOPS HERE)
    i = 1;
    while i <= n
        j = 1;
        while j <= n
            A3(i,j) = i+j;
            j = j + 1;
        end
        i = i + 1;
    end

    % While-Loop (ii)
    A4 = zeros(n); % (DO NOT MODIFY THIS LINE)

    % (REWRITE FOR-LOOP (ii) USING WHILE LOOPS HERE)
    i = 1;
    while i <= n
        j = i;
        while j <= n
            A4(i,j) = i+j;
            A4(j,i) = A4(i,j);
            j = j + 1;
        end
        i = i + 1;
    end

    % --- Part C [10 Points] --- %
    A = A1; % (DO NOT MODIFY THIS LINE)
    B = randi([-7,7], n, n-2);

    ABBA = A*B;
    % B*A will not work because it will cause a dimension mismatch for
    % the multiplication of the matrices. B*A would attempt to multiply
    % (n x (n-2)) * (n x n) which is not defined
    
    C = randi([-7,7], n, n);

    AC = A*C;
    CA = C*A;
    % (AC and CA are not equal because matrix multiplication is not 
    % commutative)
    % Aside: Matrix multiplication is function composition.

    AI = A*eye(n);
    IA = eye(n)*A;
    % AI and IA are equal because multiplying by the identity matrix 
    % does not change A. This is proven by the special property "the matrix
    % A^-1 is invertible and (A^-1)^-1 = A"
    % Hint: I_n, the identity matrix, has some special property.

    % --- Part D [10 Points] --- %
    inverse_A = inv(A);
    % (The warning indicates that Matrix A is close to singular, implying
    % that it should be treated as non-invertible. The very small RCOND 
    % value suggests that there is numerical instability and potential 
    % inacurracies)

    D = [1, 0, -1; 2 1 -2; 0, 1, -1]
    inverse_D = inv(D);

    % Complete using *only* two lines and using the rref function (cannot use
    % inv function)!
    rref_something = rref([D eye(size(D))]);
    rref_inverse_D = rref_something(:, size(D,2)+1:end);

    inv_inv_D = inv(inv(D));
    % (inv(inv(D)) will equal D which shows that taking the inverse 2 
    % times will return the original matrix

    E = [1, -2, 2; 1, -1, 0; 1, -1, 2];

    inverse_DE = inv(D*E);
    inv_D_inv_E = inv(D)*inv(E);
    inv_E_inv_D = inv(E)*inv(D);
    % The inverse of the product of two invertible matrices D and C is
    % equal to product of their inversese in reverse order so
    % inv(D*E)=inv(E)*inv(D)

    inv_DT = inv(D');
    inv_D_T = (inv(D))';
    % The inverse of the transpose of an invertible matrix D is equal to
    % transpose of inverse of the matrix so inv(D') = inv(D))'
end
