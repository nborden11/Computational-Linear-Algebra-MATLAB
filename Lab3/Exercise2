function [name, ufid, ...
    A1, b1, sol_1_partic, sol_1_matlab, sol_1_cramer, ...
    A2, b2, sol_2_partic, sol_2_matlab, sol_2_cramer, ...
    A3, b3, sol_3_partic, sol_3_matlab, sol_3_cramer] = Exercise2()
    % --- Name & UFID --- %
    name = "Nicholas Borden";
    ufid = 46223988;

    % --- Part A (see CramersRule.m) [10 Points] --- %

    % --- Part B [10 Points] --- %
    % (i) m > n
    A1 = randi([-7, 7], 5, 3);
    b1 = randi([-7, 7], 5, 1);

    sol_1_partic = ParticularSolution(A1, b1);
    sol_1_matlab = A1\b1;
    sol_1_cramer = CramersRule(A1, b1);

    % (ii) m < n
    A2 = randi([-7, 7], 3, 5);
    b2 = randi([-7, 7], 3, 1);

    sol_2_partic = ParticularSolution(A2, b2);
    sol_2_matlab = A2\b2;
    sol_2_cramer = CramersRule(A2, b2);

    % (iii) m = n
    A3 = randi([-7, 7], 5, 5);
    b3 = randi([-7, 7], 5, 1);

    sol_3_partic = ParticularSolution(A3, b3);
    sol_3_matlab = A3\b3;
    sol_3_cramer = CramersRule(A3, b3);

    % --- Part C [10 Points] --- %

    % When A is invertible, Cramer's rule, MATLAB's backslash operator, and
    % ParticularSolution will return a unique solution

    % When Ax = b is consistent where A is an n x n singular matrix,
    % Cramer's rule will not return a correct solution because it doesn't 
    % work on singular matrices, MATLAB's backslash operator and 
    % ParticularSolution will pick one of infinite solutions

    % When Ax = b is consistent where A is an m x n (non-square) matrix,
    % Cramer's rule will not return a correct solution because it doesn't
    % work on matrices that aren't square, MATLAB's backslash operator will 
    % pick one of the solutions, ParticularSolution will also pick one of
    % the solutions (when the system is underdetermined, it is the minimum
    % norm solution - closest to the origin in the solution space)
 
   
end
